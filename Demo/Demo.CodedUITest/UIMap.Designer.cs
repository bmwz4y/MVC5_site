// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Demo.CodedUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertAhmadName - Use 'AssertAhmadNameExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAhmadName()
        {
            #region Variable Declarations
            WinEdit uIAhmadMohammadEdit = this.UISuperStartMozillaFirWindow.UIItemCell.UIAhmadMohammadEdit;
            #endregion

            // Wait for 3 seconds for user delay between actions; Verify that the 'Name' property of 'Ahmad Mohammad' text box equals 'Ahmad Mohammad'
            Playback.Wait(3000);
            Assert.AreEqual(this.AssertAhmadNameExpectedValues.UIAhmadMohammadEditName, uIAhmadMohammadEdit.Name, "not Ahmad Mohammad");
        }
        
        /// <summary>
        /// Assertthattableisseenbyclickanythinginsidetable - Test Case 3
        /// </summary>
        public void Assertthattableisseenbyclickanythinginsidetable()
        {
            #region Variable Declarations
            HtmlDocument uIHttplocalhost3000Document = this.UIHttplocalhost3000IntWindow.UIHttplocalhost3000Document;
            HtmlCell uIAACell = this.UIHttplocalhost3000IntWindow.UIHttplocalhost3000Document.UIClientTableTable.UIAACell;
            #endregion

            // Move 'http://localhost:3000/' document
            Mouse.StartDragging(uIHttplocalhost3000Document, new Point(776, 93));
            Mouse.StopDragging(uIHttplocalhost3000Document, -2, 137);

            // Click 'a a' cell
            Mouse.Click(uIAACell, new Point(67, 14));
        }
        
        /// <summary>
        /// browserSyncFFMain - Use 'browserSyncFFMainParams' to pass parameters into this method.
        /// </summary>
        public void browserSyncFFMain()
        {
            #region Variable Declarations
            WinControl uIHttplocalhost7981Document = this.UISuperStartMozillaFirWindow.UIItemPropertyPage.UIHttplocalhost7981Document;
            #endregion

            // Type 'Alt, Control + {Enter}' in 'http://localhost:7981/' document
            Keyboard.SendKeys(uIHttplocalhost7981Document, this.browserSyncFFMainParams.UIHttplocalhost7981DocumentSendKeys, (ModifierKeys.Alt | ModifierKeys.Control));
        }
        
        /// <summary>
        /// ClickCancel - Test Case 3
        /// </summary>
        public void ClickCancel()
        {
            #region Variable Declarations
            HtmlHyperlink uICancelHyperlink = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIContentMainPane.UICancelHyperlink;
            #endregion

            // Click 'Cancel' link
            Mouse.Click(uICancelHyperlink, new Point(119, 14));
        }
        
        /// <summary>
        /// clickcancel1 - Test Case 4
        /// </summary>
        public void clickcancel1()
        {
            #region Variable Declarations
            HtmlHyperlink uIClientsHyperlink = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIClientsClientTypePane.UIClientsHyperlink;
            HtmlDiv uIWelcometestLogOffPane = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIHeaderCustom.UIWelcometestLogOffPane;
            HtmlDocument uIHttplocalhost3000CliDocument = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument;
            HtmlHyperlink uICancelHyperlink = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIContentMainPane.UICancelHyperlink;
            HtmlDocument uIHttplocalhost3000Document = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000Document;
            HtmlCell uIAACell = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000Document.UIClientTableTable.UIAACell;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover 'Clients' link at (1, 1)
            Mouse.Hover(uIClientsHyperlink, new Point(1, 1));

            // Mouse hover 'Welcome, test Log Off' pane at (1, 1)
            Mouse.Hover(uIWelcometestLogOffPane, new Point(1, 1));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Move 'http://localhost:3000/Client/Create' document
            Mouse.StartDragging(uIHttplocalhost3000CliDocument, new Point(887, 69));
            Mouse.StopDragging(uIHttplocalhost3000CliDocument, 8, 175);

            // Click 'Cancel' link
            Mouse.Click(uICancelHyperlink, new Point(107, 12));

            // Move 'http://localhost:3000/' document
            Mouse.StartDragging(uIHttplocalhost3000Document, new Point(890, 61));
            Mouse.StopDragging(uIHttplocalhost3000Document, -3, 116);

            // Click 'a a' cell
            Mouse.Click(uIAACell, new Point(82, 20));
        }
        
        /// <summary>
        /// ClickCreate
        /// </summary>
        public void ClickCreate()
        {
            #region Variable Declarations
            HtmlButton uICreateButton = this.UIHttplocalhost7981CliWindow.UIHttplocalhost7981CliDocument.UICreateButton;
            #endregion

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(27, 3));
        }
        
        /// <summary>
        /// clickcreate1 - Test Case 4
        /// </summary>
        public void clickcreate1()
        {
            #region Variable Declarations
            HtmlDocument uIHttplocalhost3000Document = this.UIHttplocalhost3000IntWindow.UIHttplocalhost3000Document;
            #endregion

            // Move 'http://localhost:3000/' document
            Mouse.StartDragging(uIHttplocalhost3000Document, new Point(885, 55));
            Mouse.StopDragging(uIHttplocalhost3000Document, 3, 69);
        }
        
        /// <summary>
        /// clickcreate1_1
        /// </summary>
        public void clickcreate1_1()
        {
            #region Variable Declarations
            HtmlButton uICreateButton = this.UIHttplocalhost3000IntWindow.UIHttplocalhost3000Document.UICreateButton;
            #endregion

            // Wait for 3 seconds for user delay between actions; Click 'Create' button
            Playback.Wait(3000);
            Mouse.Click(uICreateButton, new Point(38, 20));
        }
        
        /// <summary>
        /// clickcreateadd - Test Case 4
        /// </summary>
        public void clickcreateadd()
        {
            #region Variable Declarations
            HtmlDocument uIHttplocalhost3000CliDocument = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument;
            BrowserWindow uIHttplocalhost3000CliWindow = this.UIHttplocalhost3000CliWindow;
            HtmlButton uISaveButton = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UISaveButton;
            #endregion

            // Move 'http://localhost:3000/Client/Create' document to 'http://localhost:3000/Client/Create - Internet Exp...' window
            uIHttplocalhost3000CliWindow.EnsureClickable(new Point(907, 271));
            Mouse.StartDragging(uIHttplocalhost3000CliDocument, new Point(891, 67));
            Mouse.StopDragging(uIHttplocalhost3000CliWindow, new Point(907, 271));

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(97, 10));
        }
        
        /// <summary>
        /// ClickonAdd - Test Case 3
        /// </summary>
        public void ClickonAdd()
        {
            #region Variable Declarations
            HtmlButton uISaveButton = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UISaveButton;
            HtmlDocument uIHttplocalhost3000CliDocument = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument;
            #endregion

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(92, 7));

            // Move 'http://localhost:3000/Client/Create' document
            Mouse.StartDragging(uIHttplocalhost3000CliDocument, new Point(774, 121));
            Mouse.StopDragging(uIHttplocalhost3000CliDocument, -7, 133);
        }
        
        /// <summary>
        /// ClickonCreate - Test Case 3
        /// </summary>
        public void ClickonCreate()
        {
            #region Variable Declarations
            HtmlDocument uIHttplocalhost3000Document = this.UIHttplocalhost3000IntWindow.UIHttplocalhost3000Document;
            HtmlButton uICreateButton = this.UIHttplocalhost3000IntWindow.UIHttplocalhost3000Document.UICreateButton;
            #endregion

            // Move 'http://localhost:3000/' document
            Mouse.StartDragging(uIHttplocalhost3000Document, new Point(774, 86));
            Mouse.StopDragging(uIHttplocalhost3000Document, 6, 100);

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(47, 15));
        }
        
        /// <summary>
        /// Clickonfirefoxthenchromethenie - Test Case 3
        /// </summary>
        public void Clickonfirefoxthenchromethenie()
        {
            #region Variable Declarations
            WinList uITaskSwitcherList = this.UIItemWindow.UITaskSwitcherList;
            #endregion

            // Click 'Task Switcher' list box
            Mouse.Click(uITaskSwitcherList, new Point(137, 225));
        }
        
        /// <summary>
        /// enterdetailsandselectbutleaveemailempty - Test Case 4 - Use 'enterdetailsandselectbutleaveemailemptyParams' to pass parameters into this method.
        /// </summary>
        public void enterdetailsandselectbutleaveemailempty()
        {
            #region Variable Declarations
            HtmlDocument uIHttplocalhost3000CliDocument = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument;
            HtmlEdit uIFirstNameEdit = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIFirstNameEdit;
            HtmlEdit uILastNameEdit = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UILastNameEdit;
            HtmlEdit uIBirthDateEdit = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIBirthDateEdit;
            HtmlHyperlink uIItem26Hyperlink = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIUidatepickerdivPane.UIItem26Hyperlink;
            HtmlHyperlink uIItem19Hyperlink = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIUidatepickerdivPane.UIItem19Hyperlink;
            HtmlHyperlink uIItem12Hyperlink = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIUidatepickerdivPane.UIItem12Hyperlink;
            HtmlCell uIItem12Cell = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIUidatepickerdivPane.UIItemTable.UIItem12Cell;
            HtmlCell uIItem11Cell = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIUidatepickerdivPane.UIItemTable.UIItem11Cell;
            HtmlCustom uIItemCustom = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIItemCustom;
            HtmlComboBox uIClientTypeComboBox = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIClientTypeComboBox;
            HtmlButton uISaveButton = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UISaveButton;
            #endregion

            // Move 'http://localhost:3000/Client/Create' document
            Mouse.StartDragging(uIHttplocalhost3000CliDocument, new Point(889, 86));
            Mouse.StopDragging(uIHttplocalhost3000CliDocument, 7, 72);

            // Type 'asdf' in 'First Name *' text box
            uIFirstNameEdit.Text = this.enterdetailsandselectbutleaveemailemptyParams.UIFirstNameEditText;

            // Type 'fda' in 'Last Name *' text box
            uILastNameEdit.Text = this.enterdetailsandselectbutleaveemailemptyParams.UILastNameEditText;

            // Click 'Birth Date' text box
            Mouse.Click(uIBirthDateEdit, new Point(117, 13));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover '26' link at (1, 1)
            Mouse.Hover(uIItem26Hyperlink, new Point(1, 1));

            // Mouse hover '19' link at (1, 1)
            Mouse.Hover(uIItem19Hyperlink, new Point(1, 1));

            // Mouse hover '12' link at (1, 1)
            Mouse.Hover(uIItem12Hyperlink, new Point(1, 1));

            // Mouse hover '12' cell at (1, 1)
            Mouse.Hover(uIItem12Cell, new Point(1, 1));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click '11' cell
            Mouse.Click(uIItem11Cell, new Point(35, 21));

            // Click custom control
            Mouse.Click(uIItemCustom, new Point(225, 5));

            // Click custom control
            Mouse.Click(uIItemCustom, new Point(388, 3));

            // Select 'Bronze' in 'Client Type *' combo box
            uIClientTypeComboBox.SelectedItem = this.enterdetailsandselectbutleaveemailemptyParams.UIClientTypeComboBoxSelectedItem;

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(66, 13));
        }
        
        /// <summary>
        /// FFClickCreateButton
        /// </summary>
        public void FFClickCreateButton()
        {
            #region Variable Declarations
            WinButton uICreateButton = this.UISuperStartMozillaFirWindow.UIHttplocalhost7981Document1.UICreateButton;
            #endregion

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(17, 15));
        }
        
        /// <summary>
        /// FFCreateDummy - Use 'FFCreateDummyParams' to pass parameters into this method.
        /// </summary>
        public void FFCreateDummy()
        {
            #region Variable Declarations
            WinEdit uIFirstNameEdit = this.UISuperStartMozillaFirWindow.UIHttplocalhost7981CliDocument.UIFirstNameEdit;
            WinEdit uILastNameEdit = this.UISuperStartMozillaFirWindow.UIHttplocalhost7981CliDocument.UILastNameEdit;
            WinEdit uIBirthDateEdit = this.UISuperStartMozillaFirWindow.UIHttplocalhost7981CliDocument.UIBirthDateEdit;
            WinEdit uIItem1Edit = this.UISuperStartMozillaFirWindow.UIItem1Hyperlink.UIItem1Edit;
            WinEdit uIEmailEdit = this.UISuperStartMozillaFirWindow.UIHttplocalhost7981CliDocument.UIEmailEdit;
            WinComboBox uIClientTypeComboBox = this.UISuperStartMozillaFirWindow.UIHttplocalhost7981CliDocument.UIClientTypeComboBox;
            WinComboBox uIClientTypeComboBox1 = this.UIItemWindow1.UIClientTypeComboBox;
            #endregion

            // Type 'a' in 'First Name *' text box
            uIFirstNameEdit.Text = this.FFCreateDummyParams.UIFirstNameEditText;

            // Type 'b' in 'Last Name *' text box
            uILastNameEdit.Text = this.FFCreateDummyParams.UILastNameEditText;

            // Click 'Birth Date' text box
            Mouse.Click(uIBirthDateEdit, new Point(40, 9));

            // Click '1' text box
            Mouse.Click(uIItem1Edit, new Point(3, 5));

            // Type 'a@b.c' in 'Email *' text box
            uIEmailEdit.Text = this.FFCreateDummyParams.UIEmailEditText;

            // Click 'Client Type *' combo box
            Mouse.Click(uIClientTypeComboBox, new Point(207, 12));

            // Click 'Client Type *' combo box
            Mouse.Click(uIClientTypeComboBox1, new Point(187, 49));
        }
        
        /// <summary>
        /// FFCreateDummy_Save
        /// </summary>
        public void FFCreateDummy_Save()
        {
            #region Variable Declarations
            WinButton uISaveButton = this.UISuperStartMozillaFirWindow.UIHttplocalhost7981CliDocument.UISaveButton;
            #endregion

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(110, 13));
        }
        
        /// <summary>
        /// launchChrome - Use 'launchChromeParams' to pass parameters into this method.
        /// </summary>
        public void launchChrome()
        {
            #region Variable Declarations
            WinEdit uIAddressandsearchbarEdit = this.UINewTabGoogleChromeWindow.UIItemGroup.UIAddressandsearchbarEdit;
            #endregion

            // Launch '%ProgramFiles(x86)%\Google\Chrome\Application\chrome.exe'
            ApplicationUnderTest uINewTabGoogleChromeWindow = ApplicationUnderTest.Launch(this.launchChromeParams.UINewTabGoogleChromeWindowExePath, this.launchChromeParams.UINewTabGoogleChromeWindowAlternateExePath);

            // Wait for 3 seconds for user delay between actions; Type 'localhost:7981' in 'Address and search bar' text box
            Playback.Wait(3000);
            uIAddressandsearchbarEdit.Text = this.launchChromeParams.UIAddressandsearchbarEditText;

            // Type '{Enter}' in 'Address and search bar' text box
            Keyboard.SendKeys(uIAddressandsearchbarEdit, this.launchChromeParams.UIAddressandsearchbarEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// launchChromeClientCreate - Use 'launchChromeClientCreateParams' to pass parameters into this method.
        /// </summary>
        public void launchChromeClientCreate()
        {
            #region Variable Declarations
            WinClient uIDesktopClient = this.UIItemWindow.UIItemWindow1.UIDesktopClient;
            WinMenuItem uIGoogleChromeMenuItem = this.UIStartmenuWindow.UIItemWindow.UIStartmenuClient.UIGoogleChromeMenuItem;
            WinEdit uIAddressandsearchbarEdit = this.UINewTabGoogleChromeWindow.UIItemGroup.UIAddressandsearchbarEdit;
            #endregion

            // Click 'Desktop' client
            Mouse.Click(uIDesktopClient, new Point(0, 29));

            // Click 'Google Chrome' menu item
            Mouse.Click(uIGoogleChromeMenuItem, new Point(119, 24));

            // Wait for 5 seconds for user delay between actions; Type 'localhost:7981/Client/Create' in 'Address and search bar' text box
            Playback.Wait(5000);
            uIAddressandsearchbarEdit.Text = this.launchChromeClientCreateParams.UIAddressandsearchbarEditText;
        }
        
        /// <summary>
        /// launchIExplorer - Use 'launchIExplorerParams' to pass parameters into this method.
        /// </summary>
        public void launchIExplorer()
        {
            #region Variable Declarations
            BrowserWindow uINewtabInternetExplorWindow = this.UINewtabInternetExplorWindow;
            #endregion

            // Go to web page 'about:Tabs' using new browser instance
            this.UINewtabInternetExplorWindow.LaunchUrl(new System.Uri(this.launchIExplorerParams.UINewtabInternetExplorWindowUrl));

            // Wait for 1 seconds for user delay between actions; Go to web page 'http://localhost:7981/'
            Playback.Wait(1000);
            uINewtabInternetExplorWindow.NavigateToUrl(new System.Uri(this.launchIExplorerParams.UINewtabInternetExplorWindowUrl1));
        }
        
        /// <summary>
        /// launchIExplorer_1 - Use 'launchIExplorer_1Params' to pass parameters into this method.
        /// </summary>
        public void launchIExplorer_1()
        {
            #region Variable Declarations
            HtmlDocument uIHttplocalhost7981Document = this.UINewtabInternetExplorWindow.UIHttplocalhost7981Document;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Type 'Alt, Control + {Enter}' in 'http://localhost:7981/' document
            Keyboard.SendKeys(uIHttplocalhost7981Document, this.launchIExplorer_1Params.UIHttplocalhost7981DocumentSendKeys, (ModifierKeys.Alt | ModifierKeys.Control));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// newBrowserWindow - Use 'newBrowserWindowParams' to pass parameters into this method.
        /// </summary>
        public void newBrowserWindow()
        {

            // Go to web page 'about:Tabs' using new browser instance
            BrowserWindow browser = BrowserWindow.Launch(new System.Uri(this.newBrowserWindowParams.Url));
        }
        
        /// <summary>
        /// post_ExitFF
        /// </summary>
        public void post_ExitFF()
        {
            #region Variable Declarations
            WinButton uIItemButton = this.UISuperStartMozillaFirWindow.UIMozillaFirefoxApplication.UIItemButton;
            #endregion

            // Wait for 3 seconds for user delay between actions; Click button numbered 3 in 'Mozilla Firefox' Application
            Playback.Wait(3000);
            Mouse.Click(uIItemButton, new Point(25, 0));
        }
        
        /// <summary>
        /// pre_insertUrl - Use 'pre_insertUrlParams' to pass parameters into this method.
        /// </summary>
        public void pre_insertUrl()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UISuperStartMozillaFirWindow.UINavigationToolbarToolBar.UIItemComboBox;
            #endregion

            // Wait for 3 seconds for user delay between actions; Select 'http:/localhost:7981' in combo box
            Playback.Wait(3000);
            uIItemComboBox.EditableItem = this.pre_insertUrlParams.UIItemComboBoxEditableItem;
        }
        
        /// <summary>
        /// pre_LaunchFF - Use 'pre_LaunchFFParams' to pass parameters into this method.
        /// </summary>
        public void pre_LaunchFF()
        {

            // Launch '%ProgramFiles(x86)%\Mozilla Firefox\firefox.exe'
            ApplicationUnderTest uISuperStartMozillaFirWindow = ApplicationUnderTest.Launch(this.pre_LaunchFFParams.UISuperStartMozillaFirWindowExePath, this.pre_LaunchFFParams.UISuperStartMozillaFirWindowAlternateExePath);
        }
        
        /// <summary>
        /// pre_LoadUrl - Use 'pre_LoadUrlParams' to pass parameters into this method.
        /// </summary>
        public void pre_LoadUrl()
        {
            #region Variable Declarations
            WinEdit uISearchorenteraddressEdit = this.UISuperStartMozillaFirWindow.UIItemComboBox.UISearchorenteraddressEdit;
            #endregion

            // Type '{Enter}' in 'Search or enter address' text box
            Keyboard.SendKeys(uISearchorenteraddressEdit, this.pre_LoadUrlParams.UISearchorenteraddressEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// putbrowsersinrespectiveorder - Test Case 4 - Use 'putbrowsersinrespectiveorderParams' to pass parameters into this method.
        /// </summary>
        public void putbrowsersinrespectiveorder()
        {
            #region Variable Declarations
            WpfToggleButton uIChromeDevToggleButton = this.UIDemoMicrosoftVisualSWindow.UIStandardToolBar.UIChromeDevToggleButton;
            WpfToggleButton uIBrowserSyncToggleButton = this.UIDemoMicrosoftVisualSWindow.UIStandardToolBar.UIBrowserSyncToggleButton;
            WinEdit uIArgumentsEdit = this.UIBrowserSyncWindow.UIItemWindow.UIArgumentsEdit;
            #endregion

            // Click 'chromeDev' toggle button
            Mouse.Click(uIChromeDevToggleButton, new Point(13, 8));

            // Click 'BrowserSync' toggle button
            Mouse.Click(uIBrowserSyncToggleButton, new Point(21, 14));

            // Wait for 2 seconds for user delay between actions; Type '{Enter}' in 'Arguments:' text box
            Playback.Wait(2000);
            Keyboard.SendKeys(uIArgumentsEdit, this.putbrowsersinrespectiveorderParams.UIArgumentsEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Putsomedatainthefirst2boxes - Test Case 3 - Use 'Putsomedatainthefirst2boxesParams' to pass parameters into this method.
        /// </summary>
        public void Putsomedatainthefirst2boxes()
        {
            #region Variable Declarations
            HtmlEdit uIFirstNameEdit = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UIFirstNameEdit;
            HtmlEdit uILastNameEdit = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument.UILastNameEdit;
            HtmlDocument uIHttplocalhost3000CliDocument = this.UIHttplocalhost3000CliWindow.UIHttplocalhost3000CliDocument;
            #endregion

            // Type 'some data' in 'First Name *' text box
            uIFirstNameEdit.Text = this.Putsomedatainthefirst2boxesParams.UIFirstNameEditText;

            // Type 'yes it has' in 'Last Name *' text box
            uILastNameEdit.Text = this.Putsomedatainthefirst2boxesParams.UILastNameEditText;

            // Move 'http://localhost:3000/Client/Create' document
            Mouse.StartDragging(uIHttplocalhost3000CliDocument, new Point(779, 132));
            Mouse.StopDragging(uIHttplocalhost3000CliDocument, 3, 142);
        }
        
        /// <summary>
        /// Runcmd - Test Case 3 - Use 'RuncmdParams' to pass parameters into this method.
        /// </summary>
        public void Runcmd()
        {
            #region Variable Declarations
            WinComboBox uIOpenComboBox = this.UIRunWindow.UIItemWindow.UIOpenComboBox;
            WinEdit uIOpenEdit = this.UIRunWindow.UIItemWindow1.UIOpenEdit;
            #endregion

            // Press keyboard shortcut keys 'Windows + r'
            Keyboard.SendKeys(this.RuncmdParams.SendKeys, ModifierKeys.Windows);

            // Select 'cmd' in 'Open:' combo box
            uIOpenComboBox.EditableItem = this.RuncmdParams.UIOpenComboBoxEditableItem;

            // Type '{Enter}' in 'Open:' text box
            Keyboard.SendKeys(uIOpenEdit, this.RuncmdParams.UIOpenEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// scrollFFtheFillSomeSearch - Use 'scrollFFtheFillSomeSearchParams' to pass parameters into this method.
        /// </summary>
        public void scrollFFtheFillSomeSearch()
        {
            #region Variable Declarations
            WinControl uIHttplocalhost7981Document = this.UISuperStartMozillaFirWindow.UIItemPropertyPage.UIHttplocalhost7981Document;
            WinWindow uISuperStartMozillaFirWindow = this.UISuperStartMozillaFirWindow;
            WinEdit uIBirthDateEdit = this.UISuperStartMozillaFirWindow.UIHttplocalhost7981Document1.UIBirthDateEdit;
            WinHyperlink uIItem1Hyperlink = this.UISuperStartMozillaFirWindow.UIItemCell.UIItem1Hyperlink;
            WinEdit uIFirstNameEdit = this.UISuperStartMozillaFirWindow.UIHttplocalhost7981Document1.UIFirstNameEdit;
            #endregion

            // Move 'http://localhost:7981/' document to 'Super Start - Mozilla Firefox' window
            uISuperStartMozillaFirWindow.EnsureClickable(new Point(724, 262));
            Mouse.StartDragging(uIHttplocalhost7981Document, new Point(708, 97));
            Mouse.StopDragging(uISuperStartMozillaFirWindow, new Point(724, 262));

            // Click 'Birth Date' text box
            Mouse.Click(uIBirthDateEdit, new Point(96, 14));

            // Click '1' link
            Mouse.Click(uIItem1Hyperlink, new Point(17, 6));

            // Type 'and I write here' in 'First Name' text box
            uIFirstNameEdit.Text = this.scrollFFtheFillSomeSearchParams.UIFirstNameEditText;
        }
        
        /// <summary>
        /// Switchbacktocmdwindowbyclickingalttab - Test Case 3
        /// </summary>
        public void Switchbacktocmdwindowbyclickingalttab()
        {
            #region Variable Declarations
            WinClient uIAdministratorCWindowClient = this.UIAdministratorCWindowWindow.UIAdministratorCWindowClient;
            #endregion

            // Click 'Administrator: C:\Windows\system32\cmd.exe' client
            Mouse.Click(uIAdministratorCWindowClient, new Point(179, 89));
        }
        
        /// <summary>
        /// TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexplore - Test Case 3 - Use 'TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams' to pass parameters into this method.
        /// </summary>
        public void TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexplore()
        {
            #region Variable Declarations
            WinClient uIAdministratorCWindowClient = this.UIAdministratorCWindowWindow.UIAdministratorCWindowClient;
            #endregion

            // Click 'Administrator: C:\Windows\system32\cmd.exe' client
            Mouse.Click(uIAdministratorCWindowClient, new Point(201, 294));

            // Type 'browser-sync{Space}start' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams.UIAdministratorCWindowClientSendKeys, ModifierKeys.None);

            // Type '{Space}--files{Space}"Content/{Multiply}.cc{Back}ss' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams.UIAdministratorCWindowClientSendKeys1, ModifierKeys.None);

            // Type '/{Back}' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams.UIAdministratorCWindowClientSendKeys2, ModifierKeys.None);

            // Type ',{Space}Views/{Multiply}cshtml' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams.UIAdministratorCWindowClientSendKeys3, ModifierKeys.None);

            // Type '"{Space}--proxy{Space}local' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams.UIAdministratorCWindowClientSendKeys4, ModifierKeys.None);

            // Type 'host:{NumPad7}{NumPad9}{NumPad8}{NumPad1}{Space}--logLevel{Space}debug{Space}' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams.UIAdministratorCWindowClientSendKeys5, ModifierKeys.None);

            // Type '-b{Space}"chrome"{Space}"firefox"{Space}"iexplo' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams.UIAdministratorCWindowClientSendKeys6, ModifierKeys.None);

            // Type 're:{Back}"{Enter}' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams.UIAdministratorCWindowClientSendKeys7, ModifierKeys.None);
        }
        
        /// <summary>
        /// TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWeb - Test Case 3 - Use 'TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams' to pass parameters into this method.
        /// </summary>
        public void TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWeb()
        {
            #region Variable Declarations
            WinClient uIAdministratorCWindowClient = this.UIAdministratorCWindowWindow.UIAdministratorCWindowClient;
            #endregion

            // Click 'Administrator: C:\Windows\system32\cmd.exe' client
            Mouse.Click(uIAdministratorCWindowClient, new Point(222, 97));

            // Type 'cd{Space}D:\YEH\Study\' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams.UIAdministratorCWindowClientSendKeys, ModifierKeys.None);

            // Type '{NumPad2}{NumPad0}{NumPad1}{NumPad7}-{NumPad2}{NumPad0}{NumPad1}{NumPad8}\{NumPad2}{NumPad0}{NumPad1}{NumPad8}{Space}' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams.UIAdministratorCWindowClientSendKeys1, ModifierKeys.None);

            // Type '{NumPad1}st\CPE390{Add}CPE{NumPad4}{NumPad9}{NumPad0}{Space}-{Space}' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams.UIAdministratorCWindowClientSendKeys2, ModifierKeys.None);

            // Type '{CapsLock}PRACTICAL{Space}TRAININ' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams.UIAdministratorCWindowClientSendKeys3, ModifierKeys.None);

            // Type 'G{Space}{CapsLock}1{Add}2{Space}' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams.UIAdministratorCWindowClientSendKeys4, ModifierKeys.None);

            // Type '{Back}\Material\Demo\Demo.Web{Enter}' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams.UIAdministratorCWindowClientSendKeys5, ModifierKeys.None);

            // Click 'Administrator: C:\Windows\system32\cmd.exe' client
            Mouse.Click(uIAdministratorCWindowClient, new Point(328, 236));

            // Type '{Up}{Down}{Down}' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams.UIAdministratorCWindowClientSendKeys6, ModifierKeys.None);

            // Type '{Enter}' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams.UIAdministratorCWindowClientSendKeys7, ModifierKeys.None);
        }
        
        /// <summary>
        /// Typestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabs - Test Case 3 - Use 'Typestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabsParams' to pass parameters into this method.
        /// </summary>
        public void Typestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabs()
        {
            #region Variable Declarations
            WinClient uIAdministratorCWindowClient = this.UIAdministratorCWindowWindow.UIAdministratorCWindowClient;
            WinText uILocalhost7981Text = this.UILocalhost7981GoogleCWindow.UILocalhost7981TabPage.UILocalhost7981Text;
            #endregion

            // Wait for 3 seconds for user delay between actions; Type 'start chrome "http://localhost:7981/" --new-Window --window-size=683,670 --window-position=682,64  --auto-open-devtools-for-tabs{Enter}' in 'Administrator: C:\Windows\system32\cmd.exe' client
            Playback.Wait(3000);
            Keyboard.SendKeys(uIAdministratorCWindowClient, this.Typestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabsParams.UIAdministratorCWindowClientSendKeys, ModifierKeys.None);

            // Click 'localhost:7981' label
            Mouse.Click(uILocalhost7981Text, new Point(89, 17));
        }
        
        #region Properties
        public virtual AssertAhmadNameExpectedValues AssertAhmadNameExpectedValues
        {
            get
            {
                if ((this.mAssertAhmadNameExpectedValues == null))
                {
                    this.mAssertAhmadNameExpectedValues = new AssertAhmadNameExpectedValues();
                }
                return this.mAssertAhmadNameExpectedValues;
            }
        }
        
        public virtual browserSyncFFMainParams browserSyncFFMainParams
        {
            get
            {
                if ((this.mbrowserSyncFFMainParams == null))
                {
                    this.mbrowserSyncFFMainParams = new browserSyncFFMainParams();
                }
                return this.mbrowserSyncFFMainParams;
            }
        }
        
        public virtual enterdetailsandselectbutleaveemailemptyParams enterdetailsandselectbutleaveemailemptyParams
        {
            get
            {
                if ((this.menterdetailsandselectbutleaveemailemptyParams == null))
                {
                    this.menterdetailsandselectbutleaveemailemptyParams = new enterdetailsandselectbutleaveemailemptyParams();
                }
                return this.menterdetailsandselectbutleaveemailemptyParams;
            }
        }
        
        public virtual FFCreateDummyParams FFCreateDummyParams
        {
            get
            {
                if ((this.mFFCreateDummyParams == null))
                {
                    this.mFFCreateDummyParams = new FFCreateDummyParams();
                }
                return this.mFFCreateDummyParams;
            }
        }
        
        public virtual launchChromeParams launchChromeParams
        {
            get
            {
                if ((this.mlaunchChromeParams == null))
                {
                    this.mlaunchChromeParams = new launchChromeParams();
                }
                return this.mlaunchChromeParams;
            }
        }
        
        public virtual launchChromeClientCreateParams launchChromeClientCreateParams
        {
            get
            {
                if ((this.mlaunchChromeClientCreateParams == null))
                {
                    this.mlaunchChromeClientCreateParams = new launchChromeClientCreateParams();
                }
                return this.mlaunchChromeClientCreateParams;
            }
        }
        
        public virtual launchIExplorerParams launchIExplorerParams
        {
            get
            {
                if ((this.mlaunchIExplorerParams == null))
                {
                    this.mlaunchIExplorerParams = new launchIExplorerParams();
                }
                return this.mlaunchIExplorerParams;
            }
        }
        
        public virtual launchIExplorer_1Params launchIExplorer_1Params
        {
            get
            {
                if ((this.mlaunchIExplorer_1Params == null))
                {
                    this.mlaunchIExplorer_1Params = new launchIExplorer_1Params();
                }
                return this.mlaunchIExplorer_1Params;
            }
        }
        
        public virtual newBrowserWindowParams newBrowserWindowParams
        {
            get
            {
                if ((this.mnewBrowserWindowParams == null))
                {
                    this.mnewBrowserWindowParams = new newBrowserWindowParams();
                }
                return this.mnewBrowserWindowParams;
            }
        }
        
        public virtual pre_insertUrlParams pre_insertUrlParams
        {
            get
            {
                if ((this.mpre_insertUrlParams == null))
                {
                    this.mpre_insertUrlParams = new pre_insertUrlParams();
                }
                return this.mpre_insertUrlParams;
            }
        }
        
        public virtual pre_LaunchFFParams pre_LaunchFFParams
        {
            get
            {
                if ((this.mpre_LaunchFFParams == null))
                {
                    this.mpre_LaunchFFParams = new pre_LaunchFFParams();
                }
                return this.mpre_LaunchFFParams;
            }
        }
        
        public virtual pre_LoadUrlParams pre_LoadUrlParams
        {
            get
            {
                if ((this.mpre_LoadUrlParams == null))
                {
                    this.mpre_LoadUrlParams = new pre_LoadUrlParams();
                }
                return this.mpre_LoadUrlParams;
            }
        }
        
        public virtual putbrowsersinrespectiveorderParams putbrowsersinrespectiveorderParams
        {
            get
            {
                if ((this.mputbrowsersinrespectiveorderParams == null))
                {
                    this.mputbrowsersinrespectiveorderParams = new putbrowsersinrespectiveorderParams();
                }
                return this.mputbrowsersinrespectiveorderParams;
            }
        }
        
        public virtual Putsomedatainthefirst2boxesParams Putsomedatainthefirst2boxesParams
        {
            get
            {
                if ((this.mPutsomedatainthefirst2boxesParams == null))
                {
                    this.mPutsomedatainthefirst2boxesParams = new Putsomedatainthefirst2boxesParams();
                }
                return this.mPutsomedatainthefirst2boxesParams;
            }
        }
        
        public virtual RuncmdParams RuncmdParams
        {
            get
            {
                if ((this.mRuncmdParams == null))
                {
                    this.mRuncmdParams = new RuncmdParams();
                }
                return this.mRuncmdParams;
            }
        }
        
        public virtual scrollFFtheFillSomeSearchParams scrollFFtheFillSomeSearchParams
        {
            get
            {
                if ((this.mscrollFFtheFillSomeSearchParams == null))
                {
                    this.mscrollFFtheFillSomeSearchParams = new scrollFFtheFillSomeSearchParams();
                }
                return this.mscrollFFtheFillSomeSearchParams;
            }
        }
        
        public virtual TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams
        {
            get
            {
                if ((this.mTypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams == null))
                {
                    this.mTypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams = new TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams();
                }
                return this.mTypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams;
            }
        }
        
        public virtual TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams
        {
            get
            {
                if ((this.mTypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams == null))
                {
                    this.mTypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams = new TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams();
                }
                return this.mTypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams;
            }
        }
        
        public virtual Typestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabsParams Typestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabsParams
        {
            get
            {
                if ((this.mTypestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabsParams == null))
                {
                    this.mTypestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabsParams = new Typestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabsParams();
                }
                return this.mTypestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabsParams;
            }
        }
        
        public UISuperStartMozillaFirWindow UISuperStartMozillaFirWindow
        {
            get
            {
                if ((this.mUISuperStartMozillaFirWindow == null))
                {
                    this.mUISuperStartMozillaFirWindow = new UISuperStartMozillaFirWindow();
                }
                return this.mUISuperStartMozillaFirWindow;
            }
        }
        
        public UIHttplocalhost7981CliWindow UIHttplocalhost7981CliWindow
        {
            get
            {
                if ((this.mUIHttplocalhost7981CliWindow == null))
                {
                    this.mUIHttplocalhost7981CliWindow = new UIHttplocalhost7981CliWindow();
                }
                return this.mUIHttplocalhost7981CliWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIStartmenuWindow UIStartmenuWindow
        {
            get
            {
                if ((this.mUIStartmenuWindow == null))
                {
                    this.mUIStartmenuWindow = new UIStartmenuWindow();
                }
                return this.mUIStartmenuWindow;
            }
        }
        
        public UINewTabGoogleChromeWindow UINewTabGoogleChromeWindow
        {
            get
            {
                if ((this.mUINewTabGoogleChromeWindow == null))
                {
                    this.mUINewTabGoogleChromeWindow = new UINewTabGoogleChromeWindow();
                }
                return this.mUINewTabGoogleChromeWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UINewtabInternetExplorWindow UINewtabInternetExplorWindow
        {
            get
            {
                if ((this.mUINewtabInternetExplorWindow == null))
                {
                    this.mUINewtabInternetExplorWindow = new UINewtabInternetExplorWindow();
                }
                return this.mUINewtabInternetExplorWindow;
            }
        }
        
        public UIRunWindow UIRunWindow
        {
            get
            {
                if ((this.mUIRunWindow == null))
                {
                    this.mUIRunWindow = new UIRunWindow();
                }
                return this.mUIRunWindow;
            }
        }
        
        public UIAdministratorCWindowWindow UIAdministratorCWindowWindow
        {
            get
            {
                if ((this.mUIAdministratorCWindowWindow == null))
                {
                    this.mUIAdministratorCWindowWindow = new UIAdministratorCWindowWindow();
                }
                return this.mUIAdministratorCWindowWindow;
            }
        }
        
        public UILocalhost7981GoogleCWindow UILocalhost7981GoogleCWindow
        {
            get
            {
                if ((this.mUILocalhost7981GoogleCWindow == null))
                {
                    this.mUILocalhost7981GoogleCWindow = new UILocalhost7981GoogleCWindow();
                }
                return this.mUILocalhost7981GoogleCWindow;
            }
        }
        
        public UIHttplocalhost3000IntWindow UIHttplocalhost3000IntWindow
        {
            get
            {
                if ((this.mUIHttplocalhost3000IntWindow == null))
                {
                    this.mUIHttplocalhost3000IntWindow = new UIHttplocalhost3000IntWindow();
                }
                return this.mUIHttplocalhost3000IntWindow;
            }
        }
        
        public UIHttplocalhost3000CliWindow UIHttplocalhost3000CliWindow
        {
            get
            {
                if ((this.mUIHttplocalhost3000CliWindow == null))
                {
                    this.mUIHttplocalhost3000CliWindow = new UIHttplocalhost3000CliWindow();
                }
                return this.mUIHttplocalhost3000CliWindow;
            }
        }
        
        public UIDemoMicrosoftVisualSWindow UIDemoMicrosoftVisualSWindow
        {
            get
            {
                if ((this.mUIDemoMicrosoftVisualSWindow == null))
                {
                    this.mUIDemoMicrosoftVisualSWindow = new UIDemoMicrosoftVisualSWindow();
                }
                return this.mUIDemoMicrosoftVisualSWindow;
            }
        }
        
        public UIBrowserSyncWindow UIBrowserSyncWindow
        {
            get
            {
                if ((this.mUIBrowserSyncWindow == null))
                {
                    this.mUIBrowserSyncWindow = new UIBrowserSyncWindow();
                }
                return this.mUIBrowserSyncWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertAhmadNameExpectedValues mAssertAhmadNameExpectedValues;
        
        private browserSyncFFMainParams mbrowserSyncFFMainParams;
        
        private enterdetailsandselectbutleaveemailemptyParams menterdetailsandselectbutleaveemailemptyParams;
        
        private FFCreateDummyParams mFFCreateDummyParams;
        
        private launchChromeParams mlaunchChromeParams;
        
        private launchChromeClientCreateParams mlaunchChromeClientCreateParams;
        
        private launchIExplorerParams mlaunchIExplorerParams;
        
        private launchIExplorer_1Params mlaunchIExplorer_1Params;
        
        private newBrowserWindowParams mnewBrowserWindowParams;
        
        private pre_insertUrlParams mpre_insertUrlParams;
        
        private pre_LaunchFFParams mpre_LaunchFFParams;
        
        private pre_LoadUrlParams mpre_LoadUrlParams;
        
        private putbrowsersinrespectiveorderParams mputbrowsersinrespectiveorderParams;
        
        private Putsomedatainthefirst2boxesParams mPutsomedatainthefirst2boxesParams;
        
        private RuncmdParams mRuncmdParams;
        
        private scrollFFtheFillSomeSearchParams mscrollFFtheFillSomeSearchParams;
        
        private TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams mTypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams;
        
        private TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams mTypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams;
        
        private Typestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabsParams mTypestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabsParams;
        
        private UISuperStartMozillaFirWindow mUISuperStartMozillaFirWindow;
        
        private UIHttplocalhost7981CliWindow mUIHttplocalhost7981CliWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIStartmenuWindow mUIStartmenuWindow;
        
        private UINewTabGoogleChromeWindow mUINewTabGoogleChromeWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UINewtabInternetExplorWindow mUINewtabInternetExplorWindow;
        
        private UIRunWindow mUIRunWindow;
        
        private UIAdministratorCWindowWindow mUIAdministratorCWindowWindow;
        
        private UILocalhost7981GoogleCWindow mUILocalhost7981GoogleCWindow;
        
        private UIHttplocalhost3000IntWindow mUIHttplocalhost3000IntWindow;
        
        private UIHttplocalhost3000CliWindow mUIHttplocalhost3000CliWindow;
        
        private UIDemoMicrosoftVisualSWindow mUIDemoMicrosoftVisualSWindow;
        
        private UIBrowserSyncWindow mUIBrowserSyncWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAhmadName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertAhmadNameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Wait for 3 seconds for user delay between actions; Verify that the 'Name' property of 'Ahmad Mohammad' text box equals 'Ahmad Mohammad'
        /// </summary>
        public string UIAhmadMohammadEditName = "Ahmad Mohammad";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'browserSyncFFMain'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class browserSyncFFMainParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Alt, Control + {Enter}' in 'http://localhost:7981/' document
        /// </summary>
        public string UIHttplocalhost7981DocumentSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'enterdetailsandselectbutleaveemailempty'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class enterdetailsandselectbutleaveemailemptyParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'asdf' in 'First Name *' text box
        /// </summary>
        public string UIFirstNameEditText = "asdf";
        
        /// <summary>
        /// Type 'fda' in 'Last Name *' text box
        /// </summary>
        public string UILastNameEditText = "fda";
        
        /// <summary>
        /// Select 'Bronze' in 'Client Type *' combo box
        /// </summary>
        public string UIClientTypeComboBoxSelectedItem = "Bronze";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FFCreateDummy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FFCreateDummyParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'a' in 'First Name *' text box
        /// </summary>
        public string UIFirstNameEditText = "a";
        
        /// <summary>
        /// Type 'b' in 'Last Name *' text box
        /// </summary>
        public string UILastNameEditText = "b";
        
        /// <summary>
        /// Type 'a@b.c' in 'Email *' text box
        /// </summary>
        public string UIEmailEditText = "a@b.c";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'launchChrome'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class launchChromeParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%ProgramFiles(x86)%\Google\Chrome\Application\chrome.exe'
        /// </summary>
        public string UINewTabGoogleChromeWindowExePath = "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe";
        
        /// <summary>
        /// Launch '%ProgramFiles(x86)%\Google\Chrome\Application\chrome.exe'
        /// </summary>
        public string UINewTabGoogleChromeWindowAlternateExePath = "%ProgramFiles(x86)%\\Google\\Chrome\\Application\\chrome.exe";
        
        /// <summary>
        /// Wait for 3 seconds for user delay between actions; Type 'localhost:7981' in 'Address and search bar' text box
        /// </summary>
        public string UIAddressandsearchbarEditText = "localhost:7981";
        
        /// <summary>
        /// Type '{Enter}' in 'Address and search bar' text box
        /// </summary>
        public string UIAddressandsearchbarEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'launchChromeClientCreate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class launchChromeClientCreateParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 5 seconds for user delay between actions; Type 'localhost:7981/Client/Create' in 'Address and search bar' text box
        /// </summary>
        public string UIAddressandsearchbarEditText = "localhost:7981/Client/Create";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'launchIExplorer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class launchIExplorerParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'about:Tabs' using new browser instance
        /// </summary>
        public string UINewtabInternetExplorWindowUrl = "about:Tabs";
        
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Go to web page 'http://localhost:7981/'
        /// </summary>
        public string UINewtabInternetExplorWindowUrl1 = "http://localhost:7981/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'launchIExplorer_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class launchIExplorer_1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Alt, Control + {Enter}' in 'http://localhost:7981/' document
        /// </summary>
        public string UIHttplocalhost7981DocumentSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'newBrowserWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class newBrowserWindowParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'about:Tabs' using new browser instance
        /// </summary>
        public string Url = "about:Tabs";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'pre_insertUrl'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class pre_insertUrlParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 3 seconds for user delay between actions; Select 'http:/localhost:7981' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "http:/localhost:7981";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'pre_LaunchFF'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class pre_LaunchFFParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%ProgramFiles(x86)%\Mozilla Firefox\firefox.exe'
        /// </summary>
        public string UISuperStartMozillaFirWindowExePath = "C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe";
        
        /// <summary>
        /// Launch '%ProgramFiles(x86)%\Mozilla Firefox\firefox.exe'
        /// </summary>
        public string UISuperStartMozillaFirWindowAlternateExePath = "%ProgramFiles(x86)%\\Mozilla Firefox\\firefox.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'pre_LoadUrl'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class pre_LoadUrlParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Enter}' in 'Search or enter address' text box
        /// </summary>
        public string UISearchorenteraddressEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'putbrowsersinrespectiveorder'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class putbrowsersinrespectiveorderParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 2 seconds for user delay between actions; Type '{Enter}' in 'Arguments:' text box
        /// </summary>
        public string UIArgumentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Putsomedatainthefirst2boxes'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Putsomedatainthefirst2boxesParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'some data' in 'First Name *' text box
        /// </summary>
        public string UIFirstNameEditText = "some data";
        
        /// <summary>
        /// Type 'yes it has' in 'Last Name *' text box
        /// </summary>
        public string UILastNameEditText = "yes it has";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Runcmd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RuncmdParams
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + r'
        /// </summary>
        public string SendKeys = "r";
        
        /// <summary>
        /// Select 'cmd' in 'Open:' combo box
        /// </summary>
        public string UIOpenComboBoxEditableItem = "cmd";
        
        /// <summary>
        /// Type '{Enter}' in 'Open:' text box
        /// </summary>
        public string UIOpenEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'scrollFFtheFillSomeSearch'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class scrollFFtheFillSomeSearchParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'and I write here' in 'First Name' text box
        /// </summary>
        public string UIFirstNameEditText = "and I write here";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexplore'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TypebrowsersyncstartfilesContentcssViewscshtmlproxylocalhost7981logLeveldebugbchromefirefoxiexploreParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'browser-sync{Space}start' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys = "browser-sync{Space}start";
        
        /// <summary>
        /// Type '{Space}--files{Space}"Content/{Multiply}.cc{Back}ss' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys1 = "{Space}--files{Space}\"Content/{Multiply}.cc{Back}ss";
        
        /// <summary>
        /// Type '/{Back}' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys2 = "/{Back}";
        
        /// <summary>
        /// Type ',{Space}Views/{Multiply}cshtml' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys3 = ",{Space}Views/{Multiply}cshtml";
        
        /// <summary>
        /// Type '"{Space}--proxy{Space}local' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys4 = "\"{Space}--proxy{Space}local";
        
        /// <summary>
        /// Type 'host:{NumPad7}{NumPad9}{NumPad8}{NumPad1}{Space}--logLevel{Space}debug{Space}' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys5 = "host:{NumPad7}{NumPad9}{NumPad8}{NumPad1}{Space}--logLevel{Space}debug{Space}";
        
        /// <summary>
        /// Type '-b{Space}"chrome"{Space}"firefox"{Space}"iexplo' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys6 = "-b{Space}\"chrome\"{Space}\"firefox\"{Space}\"iexplo";
        
        /// <summary>
        /// Type 're:{Back}"{Enter}' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys7 = "re:{Back}\"{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWeb'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TypecdDYEHStudy2017201820181stCPE390CPE490PRACTICALTRAINING12MaterialDemoDemoWebParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'cd{Space}D:\YEH\Study\' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys = "cd{Space}D:\\YEH\\Study\\";
        
        /// <summary>
        /// Type '{NumPad2}{NumPad0}{NumPad1}{NumPad7}-{NumPad2}{NumPad0}{NumPad1}{NumPad8}\{NumPad2}{NumPad0}{NumPad1}{NumPad8}{Space}' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys1 = "{NumPad2}{NumPad0}{NumPad1}{NumPad7}-{NumPad2}{NumPad0}{NumPad1}{NumPad8}\\{NumPad" +
            "2}{NumPad0}{NumPad1}{NumPad8}{Space}";
        
        /// <summary>
        /// Type '{NumPad1}st\CPE390{Add}CPE{NumPad4}{NumPad9}{NumPad0}{Space}-{Space}' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys2 = "{NumPad1}st\\CPE390{Add}CPE{NumPad4}{NumPad9}{NumPad0}{Space}-{Space}";
        
        /// <summary>
        /// Type '{CapsLock}PRACTICAL{Space}TRAININ' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys3 = "{CapsLock}PRACTICAL{Space}TRAININ";
        
        /// <summary>
        /// Type 'G{Space}{CapsLock}1{Add}2{Space}' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys4 = "G{Space}{CapsLock}1{Add}2{Space}";
        
        /// <summary>
        /// Type '{Back}\Material\Demo\Demo.Web{Enter}' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys5 = "{Back}\\Material\\Demo\\Demo.Web{Enter}";
        
        /// <summary>
        /// Type '{Up}{Down}{Down}' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys6 = "{Up}{Down}{Down}";
        
        /// <summary>
        /// Type '{Enter}' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys7 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Typestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Typestartchromehttplocalhost7981newWindowwindowsize683670windowposition68264autoopendevtoolsfortabsParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 3 seconds for user delay between actions; Type 'start chrome "http://localhost:7981/" --new-Window --window-size=683,670 --window-position=682,64  --auto-open-devtools-for-tabs{Enter}' in 'Administrator: C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UIAdministratorCWindowClientSendKeys = "start chrome \"http://localhost:7981/\" --new-Window --window-size=683,670 --window" +
            "-position=682,64  --auto-open-devtools-for-tabs{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISuperStartMozillaFirWindow : WinWindow
    {
        
        public UISuperStartMozillaFirWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Super Start - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Super Start - Mozilla Firefox");
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UINavigationToolbarToolBar UINavigationToolbarToolBar
        {
            get
            {
                if ((this.mUINavigationToolbarToolBar == null))
                {
                    this.mUINavigationToolbarToolBar = new UINavigationToolbarToolBar(this);
                }
                return this.mUINavigationToolbarToolBar;
            }
        }
        
        public UISuperStartMozillaFirApplication UISuperStartMozillaFirApplication
        {
            get
            {
                if ((this.mUISuperStartMozillaFirApplication == null))
                {
                    this.mUISuperStartMozillaFirApplication = new UISuperStartMozillaFirApplication(this);
                }
                return this.mUISuperStartMozillaFirApplication;
            }
        }
        
        public UIItemComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new UIItemComboBox(this);
                }
                return this.mUIItemComboBox;
            }
        }
        
        public UIHttplocalhost7981Document UIHttplocalhost7981Document
        {
            get
            {
                if ((this.mUIHttplocalhost7981Document == null))
                {
                    this.mUIHttplocalhost7981Document = new UIHttplocalhost7981Document(this);
                }
                return this.mUIHttplocalhost7981Document;
            }
        }
        
        public UIHttplocalhost7981CliDocument UIHttplocalhost7981CliDocument
        {
            get
            {
                if ((this.mUIHttplocalhost7981CliDocument == null))
                {
                    this.mUIHttplocalhost7981CliDocument = new UIHttplocalhost7981CliDocument(this);
                }
                return this.mUIHttplocalhost7981CliDocument;
            }
        }
        
        public UIMozillaFirefoxApplication UIMozillaFirefoxApplication
        {
            get
            {
                if ((this.mUIMozillaFirefoxApplication == null))
                {
                    this.mUIMozillaFirefoxApplication = new UIMozillaFirefoxApplication(this);
                }
                return this.mUIMozillaFirefoxApplication;
            }
        }
        
        public UIItemCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new UIItemCell(this);
                }
                return this.mUIItemCell;
            }
        }
        
        public UIHttplocalhost7981Document1 UIHttplocalhost7981Document1
        {
            get
            {
                if ((this.mUIHttplocalhost7981Document1 == null))
                {
                    this.mUIHttplocalhost7981Document1 = new UIHttplocalhost7981Document1(this);
                }
                return this.mUIHttplocalhost7981Document1;
            }
        }
        
        public UIItem1Hyperlink UIItem1Hyperlink
        {
            get
            {
                if ((this.mUIItem1Hyperlink == null))
                {
                    this.mUIItem1Hyperlink = new UIItem1Hyperlink(this);
                }
                return this.mUIItem1Hyperlink;
            }
        }
        
        public UIItemPropertyPage UIItemPropertyPage
        {
            get
            {
                if ((this.mUIItemPropertyPage == null))
                {
                    this.mUIItemPropertyPage = new UIItemPropertyPage(this);
                }
                return this.mUIItemPropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private UINavigationToolbarToolBar mUINavigationToolbarToolBar;
        
        private UISuperStartMozillaFirApplication mUISuperStartMozillaFirApplication;
        
        private UIItemComboBox mUIItemComboBox;
        
        private UIHttplocalhost7981Document mUIHttplocalhost7981Document;
        
        private UIHttplocalhost7981CliDocument mUIHttplocalhost7981CliDocument;
        
        private UIMozillaFirefoxApplication mUIMozillaFirefoxApplication;
        
        private UIItemCell mUIItemCell;
        
        private UIHttplocalhost7981Document1 mUIHttplocalhost7981Document1;
        
        private UIItem1Hyperlink mUIItem1Hyperlink;
        
        private UIItemPropertyPage mUIItemPropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINavigationToolbarToolBar : WinToolBar
    {
        
        public UINavigationToolbarToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Navigation Toolbar";
            this.WindowTitles.Add("Super Start - Mozilla Firefox");
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Super Start - Mozilla Firefox");
                    this.mUIItemComboBox.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISuperStartMozillaFirApplication : WinControl
    {
        
        public UISuperStartMozillaFirApplication(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Super Start - Mozilla Firefox";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Application";
            this.WindowTitles.Add("Super Start - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemList.WindowTitles.Add("Super Start - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemComboBox : WinComboBox
    {
        
        public UIItemComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Super Start - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UISearchorenteraddressEdit
        {
            get
            {
                if ((this.mUISearchorenteraddressEdit == null))
                {
                    this.mUISearchorenteraddressEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISearchorenteraddressEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Search or enter address";
                    this.mUISearchorenteraddressEdit.WindowTitles.Add("Super Start - Mozilla Firefox");
                    #endregion
                }
                return this.mUISearchorenteraddressEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISearchorenteraddressEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHttplocalhost7981Document : WinControl
    {
        
        public UIHttplocalhost7981Document(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "http://localhost:7981/";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[WinButton.PropertyNames.Name] = "Create";
                    this.mUICreateButton.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUICreateButton.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    this.mUICreateButton.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICreateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHttplocalhost7981CliDocument : WinControl
    {
        
        public UIHttplocalhost7981CliDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "http://localhost:7981/Client/Create";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinHyperlink UICancelHyperlink
        {
            get
            {
                if ((this.mUICancelHyperlink == null))
                {
                    this.mUICancelHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUICancelHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Cancel";
                    this.mUICancelHyperlink.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUICancelHyperlink;
            }
        }
        
        public WinEdit UIFirstNameEdit
        {
            get
            {
                if ((this.mUIFirstNameEdit == null))
                {
                    this.mUIFirstNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFirstNameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "First Name  *";
                    this.mUIFirstNameEdit.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIFirstNameEdit;
            }
        }
        
        public WinEdit UILastNameEdit
        {
            get
            {
                if ((this.mUILastNameEdit == null))
                {
                    this.mUILastNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILastNameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Last Name  *";
                    this.mUILastNameEdit.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUILastNameEdit;
            }
        }
        
        public WinEdit UIBirthDateEdit
        {
            get
            {
                if ((this.mUIBirthDateEdit == null))
                {
                    this.mUIBirthDateEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIBirthDateEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Birth Date";
                    this.mUIBirthDateEdit.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIBirthDateEdit;
            }
        }
        
        public WinEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Email  *";
                    this.mUIEmailEdit.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public WinComboBox UIClientTypeComboBox
        {
            get
            {
                if ((this.mUIClientTypeComboBox == null))
                {
                    this.mUIClientTypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIClientTypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Client Type  *";
                    this.mUIClientTypeComboBox.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIClientTypeComboBox;
            }
        }
        
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUICancelHyperlink;
        
        private WinEdit mUIFirstNameEdit;
        
        private WinEdit mUILastNameEdit;
        
        private WinEdit mUIBirthDateEdit;
        
        private WinEdit mUIEmailEdit;
        
        private WinComboBox mUIClientTypeComboBox;
        
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMozillaFirefoxApplication : WinControl
    {
        
        public UIMozillaFirefoxApplication(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Mozilla Firefox";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Application";
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Instance] = "3";
                    this.mUIItemButton.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCell : WinCell
    {
        
        public UIItemCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAhmadMohammadEdit
        {
            get
            {
                if ((this.mUIAhmadMohammadEdit == null))
                {
                    this.mUIAhmadMohammadEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAhmadMohammadEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Ahmad Mohammad";
                    this.mUIAhmadMohammadEdit.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIAhmadMohammadEdit;
            }
        }
        
        public WinHyperlink UIItem1Hyperlink
        {
            get
            {
                if ((this.mUIItem1Hyperlink == null))
                {
                    this.mUIItem1Hyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUIItem1Hyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "1";
                    this.mUIItem1Hyperlink.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIItem1Hyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAhmadMohammadEdit;
        
        private WinHyperlink mUIItem1Hyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHttplocalhost7981Document1 : WinControl
    {
        
        public UIHttplocalhost7981Document1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "http://localhost:7981/";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[WinButton.PropertyNames.Name] = "Create";
                    this.mUICreateButton.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        
        public WinEdit UIBirthDateEdit
        {
            get
            {
                if ((this.mUIBirthDateEdit == null))
                {
                    this.mUIBirthDateEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIBirthDateEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Birth Date";
                    this.mUIBirthDateEdit.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIBirthDateEdit;
            }
        }
        
        public WinEdit UIFirstNameEdit
        {
            get
            {
                if ((this.mUIFirstNameEdit == null))
                {
                    this.mUIFirstNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFirstNameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "First Name";
                    this.mUIFirstNameEdit.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIFirstNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICreateButton;
        
        private WinEdit mUIBirthDateEdit;
        
        private WinEdit mUIFirstNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItem1Hyperlink : WinHyperlink
    {
        
        public UIItem1Hyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "1";
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItem1Edit
        {
            get
            {
                if ((this.mUIItem1Edit == null))
                {
                    this.mUIItem1Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItem1Edit.SearchProperties[WinEdit.PropertyNames.Name] = "1";
                    this.mUIItem1Edit.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIItem1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItem1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemPropertyPage : WinControl
    {
        
        public UIItemPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinControl UIHttplocalhost7981Document
        {
            get
            {
                if ((this.mUIHttplocalhost7981Document == null))
                {
                    this.mUIHttplocalhost7981Document = new WinControl(this);
                    #region Search Criteria
                    this.mUIHttplocalhost7981Document.SearchProperties[UITestControl.PropertyNames.Name] = "http://localhost:7981/";
                    this.mUIHttplocalhost7981Document.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUIHttplocalhost7981Document.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIHttplocalhost7981Document;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIHttplocalhost7981Document;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHttplocalhost7981CliWindow : BrowserWindow
    {
        
        public UIHttplocalhost7981CliWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "http://localhost:7981/Client";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("http://localhost:7981/Client");
            this.WindowTitles.Add("http://localhost:7981/Client/Create");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIHttplocalhost7981CliDocument1 UIHttplocalhost7981CliDocument
        {
            get
            {
                if ((this.mUIHttplocalhost7981CliDocument == null))
                {
                    this.mUIHttplocalhost7981CliDocument = new UIHttplocalhost7981CliDocument1(this);
                }
                return this.mUIHttplocalhost7981CliDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIHttplocalhost7981CliDocument1 mUIHttplocalhost7981CliDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHttplocalhost7981CliDocument1 : HtmlDocument
    {
        
        public UIHttplocalhost7981CliDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Client";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:7981/Client";
            this.WindowTitles.Add("http://localhost:7981/Client");
            #endregion
        }
        
        #region Properties
        public HtmlButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = "create";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUICreateButton.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUICreateButton.WindowTitles.Add("http://localhost:7981/Client");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlButton mUICreateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public WinList UITaskSwitcherList
        {
            get
            {
                if ((this.mUITaskSwitcherList == null))
                {
                    this.mUITaskSwitcherList = new WinList(this);
                    #region Search Criteria
                    this.mUITaskSwitcherList.SearchProperties[WinList.PropertyNames.Name] = "Task Switcher";
                    #endregion
                }
                return this.mUITaskSwitcherList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        
        private WinList mUITaskSwitcherList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Shell_TrayWnd";
            #endregion
        }
        
        #region Properties
        public WinClient UIDesktopClient
        {
            get
            {
                if ((this.mUIDesktopClient == null))
                {
                    this.mUIDesktopClient = new WinClient(this);
                }
                return this.mUIDesktopClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDesktopClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIStartmenuWindow : WinWindow
    {
        
        public UIStartmenuWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Start menu";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DV2ControlHost";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public UIStartmenuClient UIStartmenuClient
        {
            get
            {
                if ((this.mUIStartmenuClient == null))
                {
                    this.mUIStartmenuClient = new UIStartmenuClient(this);
                }
                return this.mUIStartmenuClient;
            }
        }
        #endregion
        
        #region Fields
        private UIStartmenuClient mUIStartmenuClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIStartmenuClient : WinClient
    {
        
        public UIStartmenuClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIGoogleChromeMenuItem
        {
            get
            {
                if ((this.mUIGoogleChromeMenuItem == null))
                {
                    this.mUIGoogleChromeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIGoogleChromeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Google Chrome";
                    this.mUIGoogleChromeMenuItem.WindowTitles.Add("Start menu");
                    #endregion
                }
                return this.mUIGoogleChromeMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIGoogleChromeMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewTabGoogleChromeWindow : WinWindow
    {
        
        public UINewTabGoogleChromeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "New Tab - Google Chrome";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Chrome_WidgetWin_1";
            this.WindowTitles.Add("New Tab - Google Chrome");
            this.WindowTitles.Add("localhost:7981/Client/Create - Google Chrome");
            #endregion
        }
        
        #region Properties
        public UIItemGroup UIItemGroup
        {
            get
            {
                if ((this.mUIItemGroup == null))
                {
                    this.mUIItemGroup = new UIItemGroup(this);
                }
                return this.mUIItemGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIItemGroup mUIItemGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemGroup : WinGroup
    {
        
        public UIItemGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("New Tab - Google Chrome");
            this.WindowTitles.Add("localhost:7981/Client/Create - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddressandsearchbarEdit
        {
            get
            {
                if ((this.mUIAddressandsearchbarEdit == null))
                {
                    this.mUIAddressandsearchbarEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddressandsearchbarEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Address and search bar";
                    this.mUIAddressandsearchbarEdit.WindowTitles.Add("New Tab - Google Chrome");
                    this.mUIAddressandsearchbarEdit.WindowTitles.Add("localhost:7981/Client/Create - Google Chrome");
                    #endregion
                }
                return this.mUIAddressandsearchbarEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddressandsearchbarEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Client Type  *";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            #endregion
        }
        
        #region Properties
        public WinComboBox UIClientTypeComboBox
        {
            get
            {
                if ((this.mUIClientTypeComboBox == null))
                {
                    this.mUIClientTypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIClientTypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Client Type  *";
                    #endregion
                }
                return this.mUIClientTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIClientTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewtabInternetExplorWindow : BrowserWindow
    {
        
        public UINewtabInternetExplorWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "New tab";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("New tab");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public HtmlDocument UIHttplocalhost7981Document
        {
            get
            {
                if ((this.mUIHttplocalhost7981Document == null))
                {
                    this.mUIHttplocalhost7981Document = new HtmlDocument(this);
                    #region Search Criteria
                    this.mUIHttplocalhost7981Document.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
                    this.mUIHttplocalhost7981Document.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
                    this.mUIHttplocalhost7981Document.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
                    this.mUIHttplocalhost7981Document.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
                    this.mUIHttplocalhost7981Document.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
                    this.mUIHttplocalhost7981Document.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:7981/";
                    this.mUIHttplocalhost7981Document.WindowTitles.Add("http://localhost:7981/");
                    #endregion
                }
                return this.mUIHttplocalhost7981Document;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDocument mUIHttplocalhost7981Document;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRunWindow : WinWindow
    {
        
        public UIRunWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12298";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIOpenComboBox
        {
            get
            {
                if ((this.mUIOpenComboBox == null))
                {
                    this.mUIOpenComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIOpenComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Open:";
                    this.mUIOpenComboBox.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIOpenComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenEdit
        {
            get
            {
                if ((this.mUIOpenEdit == null))
                {
                    this.mUIOpenEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open:";
                    this.mUIOpenEdit.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAdministratorCWindowWindow : WinWindow
    {
        
        public UIAdministratorCWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Administrator: C:\\Windows\\system32\\cmd.exe";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            this.WindowTitles.Add("Administrator: C:\\Windows\\system32\\cmd.exe");
            #endregion
        }
        
        #region Properties
        public WinClient UIAdministratorCWindowClient
        {
            get
            {
                if ((this.mUIAdministratorCWindowClient == null))
                {
                    this.mUIAdministratorCWindowClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIAdministratorCWindowClient.SearchProperties[WinControl.PropertyNames.Name] = "Administrator: C:\\Windows\\system32\\cmd.exe";
                    this.mUIAdministratorCWindowClient.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIAdministratorCWindowClient.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    #endregion
                }
                return this.mUIAdministratorCWindowClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAdministratorCWindowClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILocalhost7981GoogleCWindow : WinWindow
    {
        
        public UILocalhost7981GoogleCWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "localhost:7981 - Google Chrome";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Chrome_WidgetWin_1";
            this.WindowTitles.Add("localhost:7981 - Google Chrome");
            #endregion
        }
        
        #region Properties
        public UILocalhost7981TabPage UILocalhost7981TabPage
        {
            get
            {
                if ((this.mUILocalhost7981TabPage == null))
                {
                    this.mUILocalhost7981TabPage = new UILocalhost7981TabPage(this);
                }
                return this.mUILocalhost7981TabPage;
            }
        }
        #endregion
        
        #region Fields
        private UILocalhost7981TabPage mUILocalhost7981TabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILocalhost7981TabPage : WinTabPage
    {
        
        public UILocalhost7981TabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabPage.PropertyNames.Name] = "localhost:7981";
            this.WindowTitles.Add("localhost:7981 - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinText UILocalhost7981Text
        {
            get
            {
                if ((this.mUILocalhost7981Text == null))
                {
                    this.mUILocalhost7981Text = new WinText(this);
                    #region Search Criteria
                    this.mUILocalhost7981Text.SearchProperties[WinText.PropertyNames.Name] = "localhost:7981";
                    this.mUILocalhost7981Text.WindowTitles.Add("localhost:7981 - Google Chrome");
                    #endregion
                }
                return this.mUILocalhost7981Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUILocalhost7981Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHttplocalhost3000IntWindow : BrowserWindow
    {
        
        public UIHttplocalhost3000IntWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "http://localhost:3000/";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("http://localhost:3000/");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIHttplocalhost3000Document UIHttplocalhost3000Document
        {
            get
            {
                if ((this.mUIHttplocalhost3000Document == null))
                {
                    this.mUIHttplocalhost3000Document = new UIHttplocalhost3000Document(this);
                }
                return this.mUIHttplocalhost3000Document;
            }
        }
        #endregion
        
        #region Fields
        private UIHttplocalhost3000Document mUIHttplocalhost3000Document;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHttplocalhost3000Document : HtmlDocument
    {
        
        public UIHttplocalhost3000Document(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:3000/";
            this.WindowTitles.Add("http://localhost:3000/");
            #endregion
        }
        
        #region Properties
        public HtmlButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = "create";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = "";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "4";
                    this.mUICreateButton.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUICreateButton.WindowTitles.Add("http://localhost:3000/");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        
        public UIClientTableTable UIClientTableTable
        {
            get
            {
                if ((this.mUIClientTableTable == null))
                {
                    this.mUIClientTableTable = new UIClientTableTable(this);
                }
                return this.mUIClientTableTable;
            }
        }
        #endregion
        
        #region Fields
        private HtmlButton mUICreateButton;
        
        private UIClientTableTable mUIClientTableTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIClientTableTable : HtmlTable
    {
        
        public UIClientTableTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "ClientTable";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "UID\r\n\r\n\r\n\r\nClient Name\r\n\r\n\r\n\r\nBirth Date";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"table table-hover table-striped\" id=\"ClientTable\" style=\"margin-top: -41px" +
                ";\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "6";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "7";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "table table-hover table-striped";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("http://localhost:3000/");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIAACell
        {
            get
            {
                if ((this.mUIAACell == null))
                {
                    this.mUIAACell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIAACell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIAACell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIAACell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIAACell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "a a";
                    this.mUIAACell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIAACell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "5";
                    this.mUIAACell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIAACell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIAACell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "30";
                    this.mUIAACell.WindowTitles.Add("http://localhost:3000/");
                    #endregion
                }
                return this.mUIAACell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIAACell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHttplocalhost3000CliWindow : BrowserWindow
    {
        
        public UIHttplocalhost3000CliWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "http://localhost:3000/Client/Create";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("http://localhost:3000/Client/Create");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIHttplocalhost3000CliDocument UIHttplocalhost3000CliDocument
        {
            get
            {
                if ((this.mUIHttplocalhost3000CliDocument == null))
                {
                    this.mUIHttplocalhost3000CliDocument = new UIHttplocalhost3000CliDocument(this);
                }
                return this.mUIHttplocalhost3000CliDocument;
            }
        }
        
        public UIHttplocalhost3000Document1 UIHttplocalhost3000Document
        {
            get
            {
                if ((this.mUIHttplocalhost3000Document == null))
                {
                    this.mUIHttplocalhost3000Document = new UIHttplocalhost3000Document1(this);
                }
                return this.mUIHttplocalhost3000Document;
            }
        }
        #endregion
        
        #region Fields
        private UIHttplocalhost3000CliDocument mUIHttplocalhost3000CliDocument;
        
        private UIHttplocalhost3000Document1 mUIHttplocalhost3000Document;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHttplocalhost3000CliDocument : HtmlDocument
    {
        
        public UIHttplocalhost3000CliDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Client/Create";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:3000/Client/Create";
            this.WindowTitles.Add("http://localhost:3000/Client/Create");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIFirstNameEdit
        {
            get
            {
                if ((this.mUIFirstNameEdit == null))
                {
                    this.mUIFirstNameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFirstNameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "FirstName";
                    this.mUIFirstNameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "FirstName";
                    this.mUIFirstNameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "First Name *";
                    this.mUIFirstNameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFirstNameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFirstNameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "fm-text";
                    this.mUIFirstNameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"FirstName\" class=\"fm-text\" id=\"Fir";
                    this.mUIFirstNameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIFirstNameEdit.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUIFirstNameEdit;
            }
        }
        
        public HtmlEdit UILastNameEdit
        {
            get
            {
                if ((this.mUILastNameEdit == null))
                {
                    this.mUILastNameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUILastNameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "LastName";
                    this.mUILastNameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "LastName";
                    this.mUILastNameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Last Name *";
                    this.mUILastNameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUILastNameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUILastNameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "fm-text";
                    this.mUILastNameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"LastName\" class=\"fm-text\" id=\"Last";
                    this.mUILastNameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUILastNameEdit.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUILastNameEdit;
            }
        }
        
        public HtmlButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = "button";
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Save";
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = "form-button-blue";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "name=\"button\" class=\"form-button-blue\" s";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUISaveButton.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        
        public UIContentMainPane UIContentMainPane
        {
            get
            {
                if ((this.mUIContentMainPane == null))
                {
                    this.mUIContentMainPane = new UIContentMainPane(this);
                }
                return this.mUIContentMainPane;
            }
        }
        
        public HtmlEdit UIBirthDateEdit
        {
            get
            {
                if ((this.mUIBirthDateEdit == null))
                {
                    this.mUIBirthDateEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIBirthDateEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "BirthDate";
                    this.mUIBirthDateEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "BirthDate";
                    this.mUIBirthDateEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Birth Date";
                    this.mUIBirthDateEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIBirthDateEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIBirthDateEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "fm-text datepicker hasDatepicker";
                    this.mUIBirthDateEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"BirthDate\" class=\"fm-text datepick";
                    this.mUIBirthDateEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIBirthDateEdit.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUIBirthDateEdit;
            }
        }
        
        public UIUidatepickerdivPane UIUidatepickerdivPane
        {
            get
            {
                if ((this.mUIUidatepickerdivPane == null))
                {
                    this.mUIUidatepickerdivPane = new UIUidatepickerdivPane(this);
                }
                return this.mUIUidatepickerdivPane;
            }
        }
        
        public HtmlCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties["TagName"] = "bl";
                    this.mUIItemCustom.SearchProperties["Id"] = null;
                    this.mUIItemCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIItemCustom.FilterProperties["Class"] = null;
                    this.mUIItemCustom.FilterProperties["ControlDefinition"] = "style=\"display: block;\"";
                    this.mUIItemCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIItemCustom.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        
        public HtmlComboBox UIClientTypeComboBox
        {
            get
            {
                if ((this.mUIClientTypeComboBox == null))
                {
                    this.mUIClientTypeComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIClientTypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "TypeId";
                    this.mUIClientTypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "TypeId";
                    this.mUIClientTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Client Type *";
                    this.mUIClientTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIClientTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIClientTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "4";
                    this.mUIClientTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = "fm-select";
                    this.mUIClientTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "name=\"TypeId\" class=\"fm-select\" id=\"Type";
                    this.mUIClientTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUIClientTypeComboBox.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUIClientTypeComboBox;
            }
        }
        
        public UIClientsClientTypePane UIClientsClientTypePane
        {
            get
            {
                if ((this.mUIClientsClientTypePane == null))
                {
                    this.mUIClientsClientTypePane = new UIClientsClientTypePane(this);
                }
                return this.mUIClientsClientTypePane;
            }
        }
        
        public UIHeaderCustom UIHeaderCustom
        {
            get
            {
                if ((this.mUIHeaderCustom == null))
                {
                    this.mUIHeaderCustom = new UIHeaderCustom(this);
                }
                return this.mUIHeaderCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIFirstNameEdit;
        
        private HtmlEdit mUILastNameEdit;
        
        private HtmlButton mUISaveButton;
        
        private UIContentMainPane mUIContentMainPane;
        
        private HtmlEdit mUIBirthDateEdit;
        
        private UIUidatepickerdivPane mUIUidatepickerdivPane;
        
        private HtmlCustom mUIItemCustom;
        
        private HtmlComboBox mUIClientTypeComboBox;
        
        private UIClientsClientTypePane mUIClientsClientTypePane;
        
        private UIHeaderCustom mUIHeaderCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIContentMainPane : HtmlDiv
    {
        
        public UIContentMainPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "contentMain";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Client - Create\r\n\r\n\r\n\r\n\r\nThe Email field";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "page-content-width column-content";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"page-content-width column-content\" id=\"contentMain\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("http://localhost:3000/Client/Create");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UICancelHyperlink
        {
            get
            {
                if ((this.mUICancelHyperlink == null))
                {
                    this.mUICancelHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICancelHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICancelHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICancelHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICancelHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Cancel";
                    this.mUICancelHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/";
                    this.mUICancelHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICancelHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:3000/";
                    this.mUICancelHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "form-button-blue";
                    this.mUICancelHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"form-button-blue\" href=\"/\"";
                    this.mUICancelHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUICancelHyperlink.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUICancelHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUICancelHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUidatepickerdivPane : HtmlDiv
    {
        
        public UIUidatepickerdivPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "ui-datepicker-div";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Prev\r\n\r\nNext\r\n\r\nDecember 2017\r\n\r\n\r\nSu\r\n\r";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all" +
                "\" id=\"ui-datepicker-div\" style=\"left: 181px; top: 113.06px; display: block; posi" +
                "tion: absolute; z-index: 1;\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "25";
            this.WindowTitles.Add("http://localhost:3000/Client/Create");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIItem26Hyperlink
        {
            get
            {
                if ((this.mUIItem26Hyperlink == null))
                {
                    this.mUIItem26Hyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIItem26Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIItem26Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIItem26Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIItem26Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "26";
                    this.mUIItem26Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Client/Create";
                    this.mUIItem26Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIItem26Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:3000/Client/Create#";
                    this.mUIItem26Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ui-state-default";
                    this.mUIItem26Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"ui-state-default\" href=\"#\"";
                    this.mUIItem26Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "28";
                    this.mUIItem26Hyperlink.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUIItem26Hyperlink;
            }
        }
        
        public HtmlHyperlink UIItem19Hyperlink
        {
            get
            {
                if ((this.mUIItem19Hyperlink == null))
                {
                    this.mUIItem19Hyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIItem19Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIItem19Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIItem19Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIItem19Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "19";
                    this.mUIItem19Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Client/Create";
                    this.mUIItem19Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIItem19Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:3000/Client/Create#";
                    this.mUIItem19Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ui-state-default";
                    this.mUIItem19Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"ui-state-default\" href=\"#\"";
                    this.mUIItem19Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "21";
                    this.mUIItem19Hyperlink.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUIItem19Hyperlink;
            }
        }
        
        public HtmlHyperlink UIItem12Hyperlink
        {
            get
            {
                if ((this.mUIItem12Hyperlink == null))
                {
                    this.mUIItem12Hyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIItem12Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIItem12Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIItem12Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIItem12Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "12";
                    this.mUIItem12Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Client/Create";
                    this.mUIItem12Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIItem12Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:3000/Client/Create#";
                    this.mUIItem12Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ui-state-default";
                    this.mUIItem12Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"ui-state-default\" href=\"#\"";
                    this.mUIItem12Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "14";
                    this.mUIItem12Hyperlink.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUIItem12Hyperlink;
            }
        }
        
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIItem26Hyperlink;
        
        private HtmlHyperlink mUIItem19Hyperlink;
        
        private HtmlHyperlink mUIItem12Hyperlink;
        
        private UIItemTable mUIItemTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemTable : HtmlTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Su\r\n\r\nMo\r\n\r\nTu\r\n\r\nWe\r\n\r\nTh\r\n\r\nFr\r\n\r\nSa\r\n";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"ui-datepicker-calendar\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "7";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "7";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "ui-datepicker-calendar";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("http://localhost:3000/Client/Create");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIItem12Cell
        {
            get
            {
                if ((this.mUIItem12Cell == null))
                {
                    this.mUIItem12Cell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIItem12Cell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIItem12Cell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIItem12Cell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIItem12Cell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "12";
                    this.mUIItem12Cell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=\" \" data-event=\"click\" data-handler=\"selectDay\" data-year=\"2017\" data-month" +
                        "=\"11\"";
                    this.mUIItem12Cell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "3";
                    this.mUIItem12Cell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "2";
                    this.mUIItem12Cell.FilterProperties[HtmlCell.PropertyNames.Class] = " ";
                    this.mUIItem12Cell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "17";
                    this.mUIItem12Cell.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUIItem12Cell;
            }
        }
        
        public HtmlCell UIItem11Cell
        {
            get
            {
                if ((this.mUIItem11Cell == null))
                {
                    this.mUIItem11Cell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIItem11Cell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIItem11Cell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIItem11Cell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIItem11Cell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "11";
                    this.mUIItem11Cell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=\" \" data-event=\"click\" data-handler=\"selectDay\" data-year=\"2017\" data-month" +
                        "=\"11\"";
                    this.mUIItem11Cell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "3";
                    this.mUIItem11Cell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIItem11Cell.FilterProperties[HtmlCell.PropertyNames.Class] = " ";
                    this.mUIItem11Cell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "16";
                    this.mUIItem11Cell.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUIItem11Cell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIItem12Cell;
        
        private HtmlCell mUIItem11Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIClientsClientTypePane : HtmlDiv
    {
        
        public UIClientsClientTypePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "tabnavigation";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Clients\r\n\r\n\r\nClient Type";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "tabs ui-tabs ui-widget ui-corner-all";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"tabs ui-tabs ui-widget ui-corner-all\" id=\"tabnavigation\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "5";
            this.WindowTitles.Add("http://localhost:3000/Client/Create");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIClientsHyperlink
        {
            get
            {
                if ((this.mUIClientsHyperlink == null))
                {
                    this.mUIClientsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIClientsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIClientsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIClientsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIClientsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Clients";
                    this.mUIClientsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Client/";
                    this.mUIClientsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIClientsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:3000/Client/";
                    this.mUIClientsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIClientsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Client/\"";
                    this.mUIClientsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIClientsHyperlink.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUIClientsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIClientsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHeaderCustom : HtmlCustom
    {
        
        public UIHeaderCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "HEADER";
            this.SearchProperties["Id"] = "header";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=\"header\"";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("http://localhost:3000/Client/Create");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIWelcometestLogOffPane
        {
            get
            {
                if ((this.mUIWelcometestLogOffPane == null))
                {
                    this.mUIWelcometestLogOffPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIWelcometestLogOffPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIWelcometestLogOffPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIWelcometestLogOffPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Welcome, test\r\n\r\nLog Off";
                    this.mUIWelcometestLogOffPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIWelcometestLogOffPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "header-inner position-relative";
                    this.mUIWelcometestLogOffPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"header-inner position-relative\"";
                    this.mUIWelcometestLogOffPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
                    this.mUIWelcometestLogOffPane.WindowTitles.Add("http://localhost:3000/Client/Create");
                    #endregion
                }
                return this.mUIWelcometestLogOffPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIWelcometestLogOffPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHttplocalhost3000Document1 : HtmlDocument
    {
        
        public UIHttplocalhost3000Document1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:3000/";
            this.WindowTitles.Add("http://localhost:3000/");
            #endregion
        }
        
        #region Properties
        public UIClientTableTable1 UIClientTableTable
        {
            get
            {
                if ((this.mUIClientTableTable == null))
                {
                    this.mUIClientTableTable = new UIClientTableTable1(this);
                }
                return this.mUIClientTableTable;
            }
        }
        #endregion
        
        #region Fields
        private UIClientTableTable1 mUIClientTableTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIClientTableTable1 : HtmlTable
    {
        
        public UIClientTableTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "ClientTable";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "UID\r\n\r\n\r\n\r\nClient Name\r\n\r\n\r\n\r\nBirth Date";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"table table-hover table-striped\" id=\"ClientTable\" style=\"margin-top: -41px" +
                ";\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "6";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "7";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "table table-hover table-striped";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("http://localhost:3000/");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIAACell
        {
            get
            {
                if ((this.mUIAACell == null))
                {
                    this.mUIAACell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIAACell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIAACell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIAACell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIAACell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "a a";
                    this.mUIAACell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIAACell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "5";
                    this.mUIAACell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIAACell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIAACell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "30";
                    this.mUIAACell.WindowTitles.Add("http://localhost:3000/");
                    #endregion
                }
                return this.mUIAACell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIAACell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDemoMicrosoftVisualSWindow : WpfWindow
    {
        
        public UIDemoMicrosoftVisualSWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Demo - Microsoft Visual Studio (Administrator)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Demo - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIStandardToolBar UIStandardToolBar
        {
            get
            {
                if ((this.mUIStandardToolBar == null))
                {
                    this.mUIStandardToolBar = new UIStandardToolBar(this);
                }
                return this.mUIStandardToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIStandardToolBar mUIStandardToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIStandardToolBar : WpfToolBar
    {
        
        public UIStandardToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfToolBar.PropertyNames.Name] = "Standard";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Demo - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton UIChromeDevToggleButton
        {
            get
            {
                if ((this.mUIChromeDevToggleButton == null))
                {
                    this.mUIChromeDevToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIChromeDevToggleButton.SearchProperties[WpfToggleButton.PropertyNames.Name] = "chromeDev";
                    this.mUIChromeDevToggleButton.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIChromeDevToggleButton.WindowTitles.Add("Demo - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIChromeDevToggleButton;
            }
        }
        
        public WpfToggleButton UIBrowserSyncToggleButton
        {
            get
            {
                if ((this.mUIBrowserSyncToggleButton == null))
                {
                    this.mUIBrowserSyncToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIBrowserSyncToggleButton.SearchProperties[WpfToggleButton.PropertyNames.Name] = "BrowserSync";
                    this.mUIBrowserSyncToggleButton.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIBrowserSyncToggleButton.WindowTitles.Add("Demo - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIBrowserSyncToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mUIChromeDevToggleButton;
        
        private WpfToggleButton mUIBrowserSyncToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBrowserSyncWindow : WinWindow
    {
        
        public UIBrowserSyncWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "BrowserSync";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("BrowserSync");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1049";
            this.WindowTitles.Add("BrowserSync");
            #endregion
        }
        
        #region Properties
        public WinEdit UIArgumentsEdit
        {
            get
            {
                if ((this.mUIArgumentsEdit == null))
                {
                    this.mUIArgumentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIArgumentsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Arguments:";
                    this.mUIArgumentsEdit.WindowTitles.Add("BrowserSync");
                    #endregion
                }
                return this.mUIArgumentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIArgumentsEdit;
        #endregion
    }
}
